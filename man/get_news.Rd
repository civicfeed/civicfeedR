% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/news.R
\name{get_news}
\alias{get_news}
\title{Get news from CivicFeed}
\usage{
get_news(q = NULL, sources = NULL, from = NULL, to = NULL, pages = 1,
  results = 10, all = FALSE, sort = NULL, key = NULL)
}
\arguments{
\item{q}{String identifying a query to be searched through specified data
sources.}

\item{sources}{Numeric vector of IDs of data source to search through. Use
\code{\link{lookup_id}} to retrieve IDs.}

\item{from}{String identifying the start date (e.g. 2018-10-01) of content to
search. Date is in UTC.}

\item{to}{String identifying the end date (e.g. 2018-10-01) of content to
search. Date is in UTC.}

\item{pages}{Integer specifying number of pages of results to return.
Defaults to 1. If number of pages specified exceeds number of pages
available, maximum number of pages available will be returned. Note:
\code{get_news} makes a new call to API for every additional page.}

\item{results}{Integer specifying number of results per page returned. Max
30. Defaults to 30.}

\item{all}{Logical indicating whether to return all results. Defaults to
\code{FALSE}. If \code{TRUE}, argument \code{pages} will be ignored. Use
\code{\link{results}} to find out how many results match your request.}

\item{sort}{String specifying how results should be ordered. Available
options are: \code{"created"}, \code{"socialcount_last"} and
\code{"_score"}.}

\item{key}{String specifying a valid CivicFeed API key. If \code{NULL},
\code{get_news} will look for a relevant API key stored as environment
variable "CF_KEY".}
}
\value{
S3 object (class: \code{"cf_api_list"}) with 2 elements:
  \code{results}, which indicates the total number of articles corresponding
  to the request, and \code{content}, which contains all available features
  of the retrieved articles.
}
\description{
Send out requests to the CivicFeed News API. The response will be parsed and
returned as a nested list.
}
\examples{
\dontrun{
get_news(q = "congress", pages = 2, sort = "_score")
## gets all features from 60 articles most relevant to query "congress"

get_news(sources = lookup_id("bbc news")[[1]], results = 10, from = "2018-10-01", sort = "socialcount_last")
## gets all features from 10 most popular articles posted by bbc news after 2018-10-01}
}
\references{
\url{https://developers.civicfeed.com/documentation}
}
\seealso{
\code{\link{titles_from}} to restructure retrieved data
}
