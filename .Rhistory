for (i in 2:length(entities)) {
df = rbind(df, entities_from(...) %>%
dplyr::filter(
entity_id == entities[i]|
term == stringr::str_to_lower(entities[i])
)
)
}
}
a = list(titles, sources, highlights, snippets, shares)
b = list(titles_from, sources_from, highlights_from, snippets_from, shares_from)
for (i in seq_along(a)) {
if (a[[i]]) {
df = dplyr::left_join(df, b[[i]](...), by = "article_id")
}
}
df
}
View(mentioned(popular, relevant, entities = c("nancy pelosi", "chuck schumer"), shares = TRUE))
#' news1 = get_news("congress")
#' news2 = get_news("white house")
#'
#' mentioned(news1, news2, entities = c("hillary clinton", "president donald trump"), snippets = TRUE)
#' ## creates a tibble of titles, sources and snippets of articles about congress or white house
#' mentioning h. clinton or trump
#'
#' mentioned(news1, news2, entities = c("hilary clinton", "donald trump"), snippets = TRUE)
#' ## no matches due to spelling error and naming disparity}
#' @export
mentioned = function(
...,
entities,
titles = TRUE,
sources = TRUE,
snippets = FALSE,
highlights = FALSE,
shares = FALSE
) {
`%>%` = magrittr::`%>%`
x = list(...)
for (n in seq_along(x)) {
if (class(x[[n]]) != "cf_api_list") {
stop("All arguments in '...' must have class 'cf_api_list'")
}
if (identical(x[[n]]$content, list())) {
warning(sprintf("Argument %s in '...' has no content", n))
next
}
}
df = entities_from(...) %>%
dplyr::filter(
entity_id == entities[1]|
stringr::str_to_lower(term) == stringr::str_to_lower(entities[1])
)
if (length(entities) > 1) {
for (i in 2:length(entities)) {
df = rbind(df, entities_from(...) %>%
dplyr::filter(
entity_id == entities[i]|
stringr::str_to_lower(term) == stringr::str_to_lower(entities[i])
)
)
}
}
a = list(titles, sources, highlights, snippets, shares)
b = list(titles_from, sources_from, highlights_from, snippets_from, shares_from)
for (i in seq_along(a)) {
if (a[[i]]) {
df = dplyr::left_join(df, b[[i]](...), by = "article_id")
}
}
df
}
View(mentioned(popular, relevant, entities = c("nancy pelosi", "chuck schumer"), shares = TRUE))
library(devtools)
devtools::document()
devtools::load_all()
setwd("C:\\Users\\Santoshi\\Documents\\GitHub\\Santoshi_G\\final_project\\civicfeedR")
devtools::load_all()
devtools::document()
?civicfeedR::lookup_id
devtools::document()
?from
?civicfeedR::lookup_id
?results
?httr::GET
httr_options()
httr::httr_options()
?user_agent
#' @references \url{https://developers.civicfeed.com/documentation}
#'
#' @examples
#' \dontrun{
#' get_news(q = "congress", from = "2018-10-01", pages = 2, results = 30)
#' ## gets all features from 60 articles about congress posted after 2018-10-01
#'
#' get_news(sources = lookup_id("bbc news")[[1]], sort = "socialcount_last")
#' ## gets all features from 10 most popular articles posted by bbc news}
#' @export
get_news = function(
q = NULL,
sources = NULL,
from = NULL,
to = NULL,
pages = 1,
results = 10,
all = FALSE,
sort = NULL,
key = NULL
) {
print.cf_api_list = function(x) {
utils::str(list(results = x$results, content = x$content))
}
if (is.null(key)) {
api_key = Sys.getenv("CF_KEY")
if (identical(api_key, "")) {
stop("Please provide argument 'key' or set env var CF_KEY to your CivicFeed API key")
}
}
if (pages <= 0 | !isTRUE(all.equal(pages, as.integer(pages)))) {
stop("argument 'pages' must be a positive integer")
}
sources = purrr::pmap(as.list(sources), paste, sep = ",")
get_page = function(page) {
query_params = list(
q = q,
sources = sources,
from = from,
to = to,
page = page,
results = results,
sort = sort
)
if (is.null(key)) {
api_key = Sys.getenv("CF_KEY")
} else {
api_key = key
}
cf_resp = suppressWarnings(
tryCatch(
httr::GET(
"https://api-beta.civicfeed.com/news/search",
httr::add_headers("x-api-key" = api_key),
query = query_params,
user_agent("http://github.com/gsantoshi/civicfeedR")
),
error = function(e) {
stop(sprintf("Invalid request\nCheck parameters and API key"), call. = FALSE)
}
)
)
if (httr::http_type(cf_resp) != "application/json") {
stop("CivicFeed API did not return json", call. = FALSE)
}
if (stringr::str_detect(toString(httr::status_code(cf_resp)), "5.{2}")) {
message("Retrying...")
cf_resp = suppressWarnings(
tryCatch(
httr::RETRY(
"httr::GET",
url = "https://api-beta.civicfeed.com/news/search",
httr::add_headers("x-api-key" = api_key),
query = query_params,
body = FALSE
),
error = function(e) {
stop(sprintf("Invalid request\nCheck parameters and API key"), call. = FALSE)
}
)
)
}
if (httr::status_code(cf_resp) != 200) {
stop(
sprintf(
"CivicFeed API request failed [%s]\n%s",
httr::status_code(cf_resp),
httr::http_status(cf_resp)$reason
),
call. = FALSE
)
}
p = tryCatch(
suppressMessages(
jsonlite::fromJSON(httr::content(cf_resp, "text"),
simplifyVector = FALSE)
),
error = function(e) {
stop(sprintf("Invalid response from CivicFeed API:\n%s", cf_resp), call. = FALSE)
}
)
if (!is.null(p$error)) {
stop(p$error, call. = FALSE)
}
if (p$status != "ok") {
stop(
sprintf(
"'%s' status received from CivicFeed API\nCheck your request",
p$status
),
call. = FALSE
)
}
p
}
parsed = get_page(page = 1)
articles = parsed$articles
total_results = parsed$results
if (all == FALSE & (pages == 1 | ceiling(total_results/results) == 1)) {
articles = articles
} else if (all == FALSE & pages <= ceiling(total_results/results)) {
for (i in 2:pages) {
articles = c(articles, get_page(i)$articles)
Sys.sleep(stats::runif(1, 1, 7))
}
} else {
for (i in 2:ceiling(total_results/results)) {
articles = c(articles, get_page(i)$articles)
Sys.sleep(stats::runif(1, 1, 7))
}
}
structure(
list(
results = total_results,
content = articles
),
class = "cf_api_list"
)
}
get_news()
cf_resp = suppressWarnings(
tryCatch(
httr::GET(
"https://api-beta.civicfeed.com/news/search",
httr::add_headers("x-api-key" = api_key),
query = query_params,
httr::user_agent("http://github.com/gsantoshi/civicfeedR")
),
error = function(e) {
stop(sprintf("Invalid request\nCheck parameters and API key"), call. = FALSE)
}
)
)
#' @references \url{https://developers.civicfeed.com/documentation}
#'
#' @examples
#' \dontrun{
#' get_news(q = "congress", from = "2018-10-01", pages = 2, results = 30)
#' ## gets all features from 60 articles about congress posted after 2018-10-01
#'
#' get_news(sources = lookup_id("bbc news")[[1]], sort = "socialcount_last")
#' ## gets all features from 10 most popular articles posted by bbc news}
#' @export
get_news = function(
q = NULL,
sources = NULL,
from = NULL,
to = NULL,
pages = 1,
results = 10,
all = FALSE,
sort = NULL,
key = NULL
) {
print.cf_api_list = function(x) {
utils::str(list(results = x$results, content = x$content))
}
if (is.null(key)) {
api_key = Sys.getenv("CF_KEY")
if (identical(api_key, "")) {
stop("Please provide argument 'key' or set env var CF_KEY to your CivicFeed API key")
}
}
if (pages <= 0 | !isTRUE(all.equal(pages, as.integer(pages)))) {
stop("argument 'pages' must be a positive integer")
}
sources = purrr::pmap(as.list(sources), paste, sep = ",")
get_page = function(page) {
query_params = list(
q = q,
sources = sources,
from = from,
to = to,
page = page,
results = results,
sort = sort
)
if (is.null(key)) {
api_key = Sys.getenv("CF_KEY")
} else {
api_key = key
}
cf_resp = suppressWarnings(
tryCatch(
httr::GET(
"https://api-beta.civicfeed.com/news/search",
httr::add_headers("x-api-key" = api_key),
query = query_params,
httr::user_agent("http://github.com/gsantoshi/civicfeedR")
),
error = function(e) {
stop(sprintf("Invalid request\nCheck parameters and API key"), call. = FALSE)
}
)
)
if (httr::http_type(cf_resp) != "application/json") {
stop("CivicFeed API did not return json", call. = FALSE)
}
if (stringr::str_detect(toString(httr::status_code(cf_resp)), "5.{2}")) {
message("Retrying...")
cf_resp = suppressWarnings(
tryCatch(
httr::RETRY(
"httr::GET",
url = "https://api-beta.civicfeed.com/news/search",
httr::add_headers("x-api-key" = api_key),
query = query_params,
body = FALSE
),
error = function(e) {
stop(sprintf("Invalid request\nCheck parameters and API key"), call. = FALSE)
}
)
)
}
if (httr::status_code(cf_resp) != 200) {
stop(
sprintf(
"CivicFeed API request failed [%s]\n%s",
httr::status_code(cf_resp),
httr::http_status(cf_resp)$reason
),
call. = FALSE
)
}
p = tryCatch(
suppressMessages(
jsonlite::fromJSON(httr::content(cf_resp, "text"),
simplifyVector = FALSE)
),
error = function(e) {
stop(sprintf("Invalid response from CivicFeed API:\n%s", cf_resp), call. = FALSE)
}
)
if (!is.null(p$error)) {
stop(p$error, call. = FALSE)
}
if (p$status != "ok") {
stop(
sprintf(
"'%s' status received from CivicFeed API\nCheck your request",
p$status
),
call. = FALSE
)
}
p
}
parsed = get_page(page = 1)
articles = parsed$articles
total_results = parsed$results
if (all == FALSE & (pages == 1 | ceiling(total_results/results) == 1)) {
articles = articles
} else if (all == FALSE & pages <= ceiling(total_results/results)) {
for (i in 2:pages) {
articles = c(articles, get_page(i)$articles)
Sys.sleep(stats::runif(1, 1, 7))
}
} else {
for (i in 2:ceiling(total_results/results)) {
articles = c(articles, get_page(i)$articles)
Sys.sleep(stats::runif(1, 1, 7))
}
}
structure(
list(
results = total_results,
content = articles
),
class = "cf_api_list"
)
}
get_news()
test = get_news()
entities_from(test)
?lookup_id
devtools::load_all()
devtools::document()
?lookup_id
devtools::document()
?lookup_id
devtools::document()
?lookup_id
#'   request.
#'
#' @references \url{https://developers.civicfeed.com/documentation}
#'
#' @examples
#' \dontrun{
#' results(q = "congress", from = "2018-10-01", to = "2018-11-01")
#' ## finds out how many articles about congress were posted between 2018-10-01 and 2018-11-01
#' }
#' @export
results = function(
q = NULL,
sources = NULL,
from = NULL,
to = NULL,
key = NULL
) {
news = get_news(
q = q,
sources = sources,
from = from,
to = to,
key = key
)
return(news$results)
}
devtools::document()
?results
results()
devtools::document()
?get_news
devtools::document()
?get_news
devtools::document()
devtools::document()
?from
devtools::document()
?from
devtools::document()
devtools::document()
?mentioned
#' news2 = get_news("white house")
#' # Good
#' mentioned(news1, news2, entities = c("hillary clinton", "president donald trump"), snippets = TRUE)
#' ## creates a tibble of titles, dates published, sources and snippets of articles about congress or white house
#' mentioning h. clinton or trump
#'
#' # Bad
#' mentioned(news1, news2, entities = c("hilary clinton", "donald trump"), snippets = TRUE)
#' ## no matches due to spelling error and naming disparity}
#' @export
mentioned = function(
...,
entities,
titles = TRUE,
published = TRUE,
sources = TRUE,
snippets = FALSE,
highlights = FALSE,
shares = FALSE
) {
`%>%` = magrittr::`%>%`
x = list(...)
for (n in seq_along(x)) {
if (class(x[[n]]) != "cf_api_list") {
stop("All arguments in '...' must have class 'cf_api_list'")
}
if (identical(x[[n]]$content, list())) {
warning(sprintf("Argument %s in '...' has no content", n))
next
}
}
df = entities_from(...) %>%
dplyr::filter(
entity_id == entities[1]|
stringr::str_to_lower(term) == stringr::str_to_lower(entities[1])
)
if (length(entities) > 1) {
for (i in 2:length(entities)) {
df = rbind(df, entities_from(...) %>%
dplyr::filter(
entity_id == entities[i]|
stringr::str_to_lower(term) == stringr::str_to_lower(entities[i])
)
)
}
}
a = list(titles, published, sources, highlights, snippets, shares)
b = list(titles_from, published_from, sources_from, highlights_from, snippets_from, shares_from)
for (i in seq_along(a)) {
if (a[[i]]) {
df = dplyr::left_join(df, b[[i]](...), by = "article_id")
}
}
df
}
devtools::document()
?mentioned
mentioned(multiple, "nancy pelosi")
multiple
mentioned(multiple, entities = "nancy pelosi")
entities_from(multiple)
mentioned(test, entities = "nancy pelosi")
congress = get_news("congress")
mentioned(test, entities = "nancy pelosi")
entities_from(congress)
mentioned(test, entities = "jeff sessions")
mentioned(congress, entities = "jeff sessions")
devtools::document()
help("package:civicfeedR")
library(civicfeedR)
help("package:civicfeedR")
ls("package:civicfeedR")
devtools::document()
?get_news
packageVersion("roxygen2")
devtools::load_all()
?get_news
getwd()
library(roxygen2)
